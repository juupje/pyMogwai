{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyMogwai API Documentation","text":""},{"location":"#mogwai.core","title":"<code>core</code>","text":""},{"location":"#mogwai.core.mogwaigraph","title":"<code>mogwaigraph</code>","text":""},{"location":"#mogwai.core.mogwaigraph.get_modern","title":"<code>get_modern()</code>","text":"<p>create the modern graph see https://tinkerpop.apache.org/docs/current/tutorials/getting-started/</p> Source code in <code>mogwai/core/mogwaigraph.py</code> <pre><code>def get_modern() -&gt; MogwaiGraph:\n    \"\"\"\n    create the modern graph\n    see https://tinkerpop.apache.org/docs/current/tutorials/getting-started/\n    \"\"\"\n    g = MogwaiGraph()\n    marko = g.add_labeled_node(\"Person\", \"marko\", {\"age\": 29})\n    vadas = g.add_labeled_node(\"Person\", \"vadas\", {\"age\": 27})\n    lop = g.add_labeled_node(\"Software\", \"lop\", {\"lang\": \"java\"})\n    josh = g.add_labeled_node(\"Person\", \"josh\", {\"age\": 32})\n    ripple = g.add_labeled_node(\"Software\", \"ripple\", {\"lang\": \"java\"})\n    peter = g.add_labeled_node(\"Person\", \"peter\", {\"age\": 35})\n\n    g.add_labeled_edge(marko, vadas, \"knows\", {\"weight\": 0.5})\n    g.add_labeled_edge(marko, josh, \"knows\", {\"weight\": 1.0})\n    g.add_labeled_edge(marko, lop, \"created\", {\"weight\": 0.4})\n    g.add_labeled_edge(josh, ripple, \"created\", {\"weight\": 1.0})\n    g.add_labeled_edge(josh, lop, \"created\", {\"weight\": 0.4})\n    g.add_labeled_edge(peter, lop, \"created\", {\"weight\": 0.2})\n    return g\n</code></pre>"},{"location":"#mogwai.core.steps","title":"<code>steps</code>","text":""},{"location":"#mogwai.core.steps.base_steps","title":"<code>base_steps</code>","text":""},{"location":"#mogwai.core.steps.branch_steps","title":"<code>branch_steps</code>","text":""},{"location":"#mogwai.core.steps.filter_steps","title":"<code>filter_steps</code>","text":""},{"location":"#mogwai.core.steps.map_steps","title":"<code>map_steps</code>","text":""},{"location":"#mogwai.core.steps.modulation_steps","title":"<code>modulation_steps</code>","text":""},{"location":"#mogwai.core.traversal","title":"<code>traversal</code>","text":""},{"location":"#mogwai.core.traversal.AnonymousTraversal","title":"<code>AnonymousTraversal</code>","text":"<p>               Bases: <code>Traversal</code></p> <p>specialized Traversal</p> Source code in <code>mogwai/core/traversal.py</code> <pre><code>class AnonymousTraversal(Traversal):\n    \"\"\"\n    specialized Traversal\n    \"\"\"\n    def __init__(self, start:'Step'=None):\n        self.query_steps = [start] if start else []\n        self.graph = None\n        self.terminated = False\n        self._needs_path = False\n\n    #we need this since anonymous traversals need to check this before they're run.\n    @property\n    def needs_path(self):\n        return self._needs_path or any((s.needs_path for s in self.query_steps))\n\n    @needs_path.setter\n    def needs_path(self, value):\n        self._needs_path = value\n\n    def run(self):\n        raise ValueError(\"Cannot run anonymous traversals\")\n\n    def _build(self, traversal:Traversal):\n        #first, set the necessary fields\n        self.graph = traversal.graph\n        self.eager = traversal.eager\n        self.use_mp = traversal.use_mp\n        self.verify_query = traversal.verify_query\n        self.needs_path = any([s.needs_path for s in self.query_steps])\n        self.optimize = traversal.optimize\n        if traversal.optimize: self._optimize_query()\n        if self.verify_query: self._verify_query()\n        if self.query_steps[0].isstart:\n            self.query_steps[0].set_traversal(self)\n        super()._build()\n\n    def __call__(self, traversers:Iterable['Traverser']) -&gt; Iterable['Traverser']:\n        #if this traversal is empty, just reflect back the incoming traversers\n        if len(self.query_steps)==0:\n            return traversers\n        self.traversers = traversers\n        if self.eager:\n            try:\n                for step in self.query_steps:\n                    logger.debug(\"Running step:\"+ str(step))\n                    self.traversers = step(self.traversers)\n                    if not type(self.traversers) is list:\n                        self.traversers = list(self.traversers)\n            except Exception as e:\n                raise GraphTraversalError(f\"Something went wrong in step {step.print_query()}\")\n        else:\n            for step in self.query_steps:\n                logger.debug(\"Running step:\"+ str(step))\n                self.traversers = step(self.traversers)\n            #TODO: Try to do some fancy error handling\n        return self.traversers\n</code></pre>"},{"location":"#mogwai.decorators","title":"<code>decorators</code>","text":""},{"location":"#mogwai.decorators.decorators","title":"<code>decorators</code>","text":""},{"location":"#mogwai.mogwai_cmd","title":"<code>mogwai_cmd</code>","text":"<p>Created on 2024-08-15</p> <p>@author: wf</p>"},{"location":"#mogwai.mogwai_cmd.MogwaiCmd","title":"<code>MogwaiCmd</code>","text":"<p>               Bases: <code>WebserverCmd</code></p> <p>command line handling for nicesprinkler</p> Source code in <code>mogwai/mogwai_cmd.py</code> <pre><code>class MogwaiCmd(WebserverCmd):\n    \"\"\"\n    command line handling for nicesprinkler\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        constructor\n        \"\"\"\n        config = MogwaiWebServer.get_config()\n        WebserverCmd.__init__(self, config, MogwaiWebServer, DEBUG)\n\n    def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n        \"\"\"\n        override the default argparser call\n        \"\"\"\n        parser = super().getArgParser(description, version_msg)\n\n        return parser\n</code></pre>"},{"location":"#mogwai.mogwai_cmd.MogwaiCmd.__init__","title":"<code>__init__()</code>","text":"<p>constructor</p> Source code in <code>mogwai/mogwai_cmd.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    constructor\n    \"\"\"\n    config = MogwaiWebServer.get_config()\n    WebserverCmd.__init__(self, config, MogwaiWebServer, DEBUG)\n</code></pre>"},{"location":"#mogwai.mogwai_cmd.MogwaiCmd.getArgParser","title":"<code>getArgParser(description, version_msg)</code>","text":"<p>override the default argparser call</p> Source code in <code>mogwai/mogwai_cmd.py</code> <pre><code>def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n    \"\"\"\n    override the default argparser call\n    \"\"\"\n    parser = super().getArgParser(description, version_msg)\n\n    return parser\n</code></pre>"},{"location":"#mogwai.mogwai_cmd.main","title":"<code>main(argv=None)</code>","text":"<p>main call</p> Source code in <code>mogwai/mogwai_cmd.py</code> <pre><code>def main(argv: list = None):\n    \"\"\"\n    main call\n    \"\"\"\n    cmd = MogwaiCmd()\n    exit_code = cmd.cmd_main(argv)\n    return exit_code\n</code></pre>"},{"location":"#mogwai.version","title":"<code>version</code>","text":"<p>Created on 2024-08-15</p> <p>@author: wf</p>"},{"location":"#mogwai.version.Version","title":"<code>Version</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Version handling for pyMogwai</p> Source code in <code>mogwai/version.py</code> <pre><code>@dataclass\nclass Version(object):\n    \"\"\"\n    Version handling for pyMogwai\n    \"\"\"\n\n    name = \"pymogwai\"\n    version = mogwai.__version__\n    date = \"2024-08-15\"\n    updated = \"2024-08-15\"\n    description = \"python native gremlin implementation\"\n\n    authors = \"Wolfgang Fahl\"\n\n    chat_url = \"https://github.com/juupje/pyMogwai/discussions\"\n    doc_url = \"https://cr.bitplan.com/index.php/pyMogwai\"\n    cm_url = \"https://github.com/juupje/pyMogwai\"\n\n    license = f\"\"\"Copyright 2024 contributors. All rights reserved.\n\n  Licensed under the Apache License 2.0\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Distributed on an \"AS IS\" basis without warranties\n  or conditions of any kind, either express or implied.\"\"\"\n    longDescription = f\"\"\"{name} version {version}\n{description}\n\n  Created by {authors} on {date} last updated {updated}\"\"\"\n</code></pre>"},{"location":"#mogwai.web","title":"<code>web</code>","text":""},{"location":"#mogwai.web.server","title":"<code>server</code>","text":"<p>Created on 2024-08-15</p> <p>@author: wf</p>"},{"location":"#mogwai.web.server.MogwaiSolution","title":"<code>MogwaiSolution</code>","text":"<p>               Bases: <code>InputWebSolution</code></p> <p>the Mogwai solution</p> Source code in <code>mogwai/web/server.py</code> <pre><code>class MogwaiSolution(InputWebSolution):\n    \"\"\"\n    the Mogwai solution\n    \"\"\"\n\n    def __init__(self, webserver: MogwaiWebServer, client: Client):\n        \"\"\"\n        Initialize the solution\n\n        Args:\n            webserver (MogwaiWebServer): The webserver instance associated with this context.\n            client (Client): The client instance this context is associated with.\n        \"\"\"\n        super().__init__(webserver, client)\n        self.graph = None\n\n    def setup_menu(self, detailed: bool = True):\n        \"\"\"\n        setup the menu\n        \"\"\"\n        super().setup_menu(detailed=detailed)\n        ui.button(icon=\"menu\", on_click=lambda: self.header.toggle())\n        with self.header:\n            if self.webserver.authenticated():\n                self.link_button(\"logout\", \"/logout\", \"logout\", new_tab=False)\n            else:\n                self.link_button(\"login\", \"/login\", \"login\", new_tab=False)\n\n    async def login_ui(self):\n        \"\"\"\n        login ui\n        \"\"\"\n        await self.webserver.login.login(self)\n\n    async def home(self):\n        \"\"\"Provide the main content page\"\"\"\n        await self.query_graph()\n\n    async def parse_file(self):\n        \"\"\"File parsing page\"\"\"\n        def setup_parse():\n            ui.label(\"Parse File\").classes('text-h4')\n            file_upload = ui.upload(label=\"Choose a file\", multiple=False, auto_upload=True)\n            file_upload.on('upload', self.handle_upload)\n\n        await self.setup_content_div(setup_parse)\n\n    async def query_graph(self):\n        \"\"\"Graph querying page\"\"\"\n        def setup_query():\n            ui.label(\"Query Graph\").classes('text-h4')\n            if self.graph:\n                query = ui.input(label=\"Enter Gremlin query\")\n                ui.button(\"Run Query\", on_click=lambda: self.run_query(query.value))\n            else:\n                ui.label(\"No graph loaded. Please parse a file first.\")\n\n        await self.setup_content_div(setup_query)\n\n    def handle_upload(self, e):\n        \"\"\"Handle file upload\"\"\"\n        file = e.content\n        if file.name.endswith('.graphml'):\n            temp_path = os.path.join(tempfile.gettempdir(), file.name)\n            with open(temp_path, 'wb') as f:\n                f.write(file.read())\n            self.graph = graphml_to_mogwaigraph(file=temp_path)\n        elif file.name.endswith('.xlsx'):\n            self.graph = EXCELGraph(file)\n        elif file.name.endswith('.pdf'):\n            self.graph = PDFGraph(file)\n        elif file.name.endswith('.pptx'):\n            self.graph = powerpoint_converter.PPGraph(file=file)\n        else:\n            ui.notify(f\"Unsupported file type: {file.name}\", type=\"negative\")\n            return\n\n        if self.graph:\n            ui.notify(\"File parsed successfully\", type=\"positive\")\n            ui.label(f\"Imported a graph with {len(self.graph.nodes)} nodes and {len(self.graph.edges)} edges.\")\n\n    def run_query(self, query):\n        \"\"\"Run a Gremlin query on the graph\"\"\"\n        if not self.graph:\n            ui.notify(\"No graph loaded. Please parse a file first.\", type=\"warning\")\n            return\n\n        g = Trav.MogwaiGraphTraversalSource(self.graph)\n        try:\n            result = eval(query, {'g': g})\n            res = result.run()\n            ui.notify(f\"Query result: {res}\")\n        except Exception as e:\n            ui.notify(f\"Error executing query: {str(e)}\", type=\"negative\")\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiSolution.__init__","title":"<code>__init__(webserver, client)</code>","text":"<p>Initialize the solution</p> <p>Parameters:</p> Name Type Description Default <code>webserver</code> <code>MogwaiWebServer</code> <p>The webserver instance associated with this context.</p> required <code>client</code> <code>Client</code> <p>The client instance this context is associated with.</p> required Source code in <code>mogwai/web/server.py</code> <pre><code>def __init__(self, webserver: MogwaiWebServer, client: Client):\n    \"\"\"\n    Initialize the solution\n\n    Args:\n        webserver (MogwaiWebServer): The webserver instance associated with this context.\n        client (Client): The client instance this context is associated with.\n    \"\"\"\n    super().__init__(webserver, client)\n    self.graph = None\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiSolution.handle_upload","title":"<code>handle_upload(e)</code>","text":"<p>Handle file upload</p> Source code in <code>mogwai/web/server.py</code> <pre><code>def handle_upload(self, e):\n    \"\"\"Handle file upload\"\"\"\n    file = e.content\n    if file.name.endswith('.graphml'):\n        temp_path = os.path.join(tempfile.gettempdir(), file.name)\n        with open(temp_path, 'wb') as f:\n            f.write(file.read())\n        self.graph = graphml_to_mogwaigraph(file=temp_path)\n    elif file.name.endswith('.xlsx'):\n        self.graph = EXCELGraph(file)\n    elif file.name.endswith('.pdf'):\n        self.graph = PDFGraph(file)\n    elif file.name.endswith('.pptx'):\n        self.graph = powerpoint_converter.PPGraph(file=file)\n    else:\n        ui.notify(f\"Unsupported file type: {file.name}\", type=\"negative\")\n        return\n\n    if self.graph:\n        ui.notify(\"File parsed successfully\", type=\"positive\")\n        ui.label(f\"Imported a graph with {len(self.graph.nodes)} nodes and {len(self.graph.edges)} edges.\")\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiSolution.home","title":"<code>home()</code>  <code>async</code>","text":"<p>Provide the main content page</p> Source code in <code>mogwai/web/server.py</code> <pre><code>async def home(self):\n    \"\"\"Provide the main content page\"\"\"\n    await self.query_graph()\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiSolution.login_ui","title":"<code>login_ui()</code>  <code>async</code>","text":"<p>login ui</p> Source code in <code>mogwai/web/server.py</code> <pre><code>async def login_ui(self):\n    \"\"\"\n    login ui\n    \"\"\"\n    await self.webserver.login.login(self)\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiSolution.parse_file","title":"<code>parse_file()</code>  <code>async</code>","text":"<p>File parsing page</p> Source code in <code>mogwai/web/server.py</code> <pre><code>async def parse_file(self):\n    \"\"\"File parsing page\"\"\"\n    def setup_parse():\n        ui.label(\"Parse File\").classes('text-h4')\n        file_upload = ui.upload(label=\"Choose a file\", multiple=False, auto_upload=True)\n        file_upload.on('upload', self.handle_upload)\n\n    await self.setup_content_div(setup_parse)\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiSolution.query_graph","title":"<code>query_graph()</code>  <code>async</code>","text":"<p>Graph querying page</p> Source code in <code>mogwai/web/server.py</code> <pre><code>async def query_graph(self):\n    \"\"\"Graph querying page\"\"\"\n    def setup_query():\n        ui.label(\"Query Graph\").classes('text-h4')\n        if self.graph:\n            query = ui.input(label=\"Enter Gremlin query\")\n            ui.button(\"Run Query\", on_click=lambda: self.run_query(query.value))\n        else:\n            ui.label(\"No graph loaded. Please parse a file first.\")\n\n    await self.setup_content_div(setup_query)\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiSolution.run_query","title":"<code>run_query(query)</code>","text":"<p>Run a Gremlin query on the graph</p> Source code in <code>mogwai/web/server.py</code> <pre><code>def run_query(self, query):\n    \"\"\"Run a Gremlin query on the graph\"\"\"\n    if not self.graph:\n        ui.notify(\"No graph loaded. Please parse a file first.\", type=\"warning\")\n        return\n\n    g = Trav.MogwaiGraphTraversalSource(self.graph)\n    try:\n        result = eval(query, {'g': g})\n        res = result.run()\n        ui.notify(f\"Query result: {res}\")\n    except Exception as e:\n        ui.notify(f\"Error executing query: {str(e)}\", type=\"negative\")\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiSolution.setup_menu","title":"<code>setup_menu(detailed=True)</code>","text":"<p>setup the menu</p> Source code in <code>mogwai/web/server.py</code> <pre><code>def setup_menu(self, detailed: bool = True):\n    \"\"\"\n    setup the menu\n    \"\"\"\n    super().setup_menu(detailed=detailed)\n    ui.button(icon=\"menu\", on_click=lambda: self.header.toggle())\n    with self.header:\n        if self.webserver.authenticated():\n            self.link_button(\"logout\", \"/logout\", \"logout\", new_tab=False)\n        else:\n            self.link_button(\"login\", \"/login\", \"login\", new_tab=False)\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiWebServer","title":"<code>MogwaiWebServer</code>","text":"<p>               Bases: <code>InputWebserver</code></p> <p>Mogwai WebServer</p> Source code in <code>mogwai/web/server.py</code> <pre><code>class MogwaiWebServer(InputWebserver):\n    \"\"\"\n    Mogwai WebServer\n    \"\"\"\n    @classmethod\n    def get_config(cls) -&gt; WebserverConfig:\n        copy_right = \"(c)2024 Wolfgang Fahl\"\n        config = WebserverConfig(\n            copy_right=copy_right,\n            version=Version(),\n            default_port=9850,\n            short_name=\"mogwai\",\n        )\n        server_config = WebserverConfig.get(config)\n        server_config.solution_class = MogwaiSolution\n        return server_config\n\n    def __init__(self):\n        \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n        InputWebserver.__init__(self, config=MogwaiWebServer.get_config())\n        users = Users(\"~/.solutions/mogwai\")\n        self.login = Login(self, users)\n\n        @ui.page(\"/\")\n        async def home(client: Client):\n            return await self.page(client, MogwaiSolution.home)\n\n        @ui.page(\"/parse\")\n        async def parse_file(client: Client):\n            if not self.login.authenticated():\n                return RedirectResponse(\"/login\")\n            return await self.page(client, MogwaiSolution.parse_file)\n\n        @ui.page(\"/query\")\n        async def query_graph(client: Client):\n            return await self.page(client, MogwaiSolution.query_graph)\n\n        @ui.page(\"/login\")\n        async def login(client: Client):\n            return await self.page(client, MogwaiSolution.login_ui)\n\n        @ui.page(\"/logout\")\n        async def logout(client: Client) -&gt; RedirectResponse:\n            if self.login.authenticated():\n                await self.login.logout()\n            return RedirectResponse(\"/\")\n\n    def authenticated(self) -&gt; bool:\n        \"\"\"\n        Check if the user is authenticated.\n        Returns:\n            True if the user is authenticated, False otherwise.\n        \"\"\"\n        return self.login.authenticated()\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiWebServer.__init__","title":"<code>__init__()</code>","text":"<p>Constructs all the necessary attributes for the WebServer object.</p> Source code in <code>mogwai/web/server.py</code> <pre><code>def __init__(self):\n    \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n    InputWebserver.__init__(self, config=MogwaiWebServer.get_config())\n    users = Users(\"~/.solutions/mogwai\")\n    self.login = Login(self, users)\n\n    @ui.page(\"/\")\n    async def home(client: Client):\n        return await self.page(client, MogwaiSolution.home)\n\n    @ui.page(\"/parse\")\n    async def parse_file(client: Client):\n        if not self.login.authenticated():\n            return RedirectResponse(\"/login\")\n        return await self.page(client, MogwaiSolution.parse_file)\n\n    @ui.page(\"/query\")\n    async def query_graph(client: Client):\n        return await self.page(client, MogwaiSolution.query_graph)\n\n    @ui.page(\"/login\")\n    async def login(client: Client):\n        return await self.page(client, MogwaiSolution.login_ui)\n\n    @ui.page(\"/logout\")\n    async def logout(client: Client) -&gt; RedirectResponse:\n        if self.login.authenticated():\n            await self.login.logout()\n        return RedirectResponse(\"/\")\n</code></pre>"},{"location":"#mogwai.web.server.MogwaiWebServer.authenticated","title":"<code>authenticated()</code>","text":"<p>Check if the user is authenticated. Returns:     True if the user is authenticated, False otherwise.</p> Source code in <code>mogwai/web/server.py</code> <pre><code>def authenticated(self) -&gt; bool:\n    \"\"\"\n    Check if the user is authenticated.\n    Returns:\n        True if the user is authenticated, False otherwise.\n    \"\"\"\n    return self.login.authenticated()\n</code></pre>"}]}